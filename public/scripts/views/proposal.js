// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "models/proposal"], function($, _, Backbone, Proposal) {
    "use strict";
    var ProposalView, _ref;
    ProposalView = (function(_super) {
      __extends(ProposalView, _super);

      function ProposalView() {
        this.on_vote_error = __bind(this.on_vote_error, this);
        _ref = ProposalView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ProposalView.prototype.tagName = "li";

      ProposalView.prototype.initialize = function(options) {
        var _this = this;
        if (options.model) {
          this.model = options.model;
          this.model.bind("change", this.render, this);
          this.model.bind("destroy", this.remove, this);
          this.render();
        } else {
          this.model = new Proposal({
            id: options.id
          });
          this.model.bind("change", this.render, this);
          this.model.bind("destroy", this.remove, this);
          this.model.fetch();
        }
        this.channel = app.pusher.subscribe("proposal-" + (this.model.get("id")));
        this.channel.bind('update', function(data) {
          return _this.model.set(data);
        });
        return this.channel.bind('destroy', function(data) {
          return _this.remove();
        });
      };

      ProposalView.prototype.events = {
        "click .upvote": "upvote",
        "click .downvote": "downvote",
        "click .delete": "delete"
      };

      ProposalView.prototype.template = function(data, options) {
        var tmp;
        if (options == null) {
          options = {
            variable: "model"
          };
        }
        tmp = "<h2><a href=\"/<%= model.get('id') %>\">“<%= model.get('subject') %>”</a>\n<br/>\n<small><a href=\"http://twitter.com/<%= model.get('owner') %>\"><%= model.get('owner') %></a></small>\n</h2>\n<div class=\"clearfix\">\n    <span class=\"time\"><%= model.voting_time_to_human() %></span>                 \n    <% if (model.get(\"is_pool\")){ %>\n    <button class=\"upvote\">Yes<sup><%= model.get('upvote_count') %></sup> &#8593;</button>            \n    <button class=\"downvote\">No<sup><%= model.get('downvote_count') %></sup> &#8595;</button>\n    <% }else{ %>\n    <button class=\"upvote\">Endorse<sup><%= model.get('upvote_count') %></sup> &#8593;</button>            \n    <% } %>\n    <% if(model.get(\"user_id\") == $(\".current_user\").attr('id') ) { %>\n    <small><button class=\"delete\">Delete</button></small>             \n    <% } %> \n</div>               \n<i class=\"sep\">&#10020;</i>";
        return _.template(tmp, data, options);
      };

      ProposalView.prototype.render = function() {
        if (this.options.add === true) {
          $("ul.collection").append(this.$el.html(this.template(this.model)));
        } else {
          this.$el.html(this.template(this.model));
        }
        return this;
      };

      ProposalView.prototype.do_vote = function(e, vote) {
        var _this = this;
        app.set_button_state(e.currentTarget);
        this.model.save({
          method: "" + vote + "_by"
        }, {
          wait: true,
          patch: true,
          error: function(model, xhr, sync) {
            return _this.on_vote_error(e, model, xhr, sync);
          }
        });
        return this;
      };

      ProposalView.prototype.upvote = function(e) {
        return this.do_vote(e, "upvote");
      };

      ProposalView.prototype.downvote = function(e) {
        console.log(e);
        return this.do_vote(e, "downvote");
      };

      ProposalView.prototype["delete"] = function(e) {
        app.set_button_state(e.currentTarget);
        this.model.destroy({
          wait: true,
          success: function(model) {
            if (window.location.pathname.match(/\/[0-9]+/) !== null) {
              return window.location.href = "/";
            }
          }
        });
        return this;
      };

      ProposalView.prototype.on_vote_error = function(e, model, xhr, sync) {
        var error, errors, _results;
        app.set_button_state(e.currentTarget, false);
        if (xhr.status !== 422) {
          errors = JSON.parse(xhr.responseText);
          _results = [];
          for (error in errors) {
            _results.push(alert(error === "base" ? errors[error] : "" + error + " " + errors[error]));
          }
          return _results;
        }
      };

      return ProposalView;

    })(Backbone.View);
    return ProposalView;
  });

}).call(this);
