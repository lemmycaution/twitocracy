// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "models/proposal"], function($, _, Backbone, Proposal) {
    "use strict";
    var ProposalView, _ref;
    ProposalView = (function(_super) {
      __extends(ProposalView, _super);

      function ProposalView() {
        _ref = ProposalView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ProposalView.prototype.tagName = "li";

      ProposalView.prototype.initialize = function(options) {
        var _this = this;
        if (options.model) {
          this.model = options.model;
          this.model.on("change", this.render, this);
          this.model.on("destroy", this.remove, this);
          this.render();
        } else {
          this.model = new Proposal({
            id: options.id
          });
          this.model.on("change", this.render, this);
          this.model.on("destroy", this.remove, this);
          this.model.fetch();
        }
        this.channel = app.pusher.subscribe("proposal-" + (this.model.get("id")));
        this.channel.bind('update', function(data) {
          return _this.model.set(data);
        });
        return this.channel.bind('destroy', function(data) {
          return _this.remove();
        });
      };

      ProposalView.prototype.events = function() {
        var events;
        if (this.model.get("is_pool")) {
          return events = {
            "click .upvote": "upvote",
            "click .downvote": "downvote",
            "click .un_upvote": "un_upvote",
            "click .un_downvote": "un_downvote",
            "click .delete": "delete"
          };
        } else {
          return events = {
            "click .upvote": "upvote",
            "click .un_upvote": "un_upvote",
            "click .delete": "delete"
          };
        }
      };

      ProposalView.prototype.template = function(data, options) {
        var tmp;
        if (options == null) {
          options = {
            variable: "model"
          };
        }
        tmp = "<h2><a href=\"/<%= model.get('id') %>\">“<%= model.get('subject') %>”</a>\n<br/>\n<small><a href=\"http://twitter.com/<%= model.get('owner') %>\"><%= model.get('owner') %></a></small>\n</h2>\n<div class=\"clearfix\">\n    <span class=\"time\"><%= model.remaining_time_to_human() %> remaining</span>                 \n    <% if (model.get(\"is_pool\")){ %>\n    \n    <% if (model.get(\"up_retweeted\")) { %>\n    <button class=\"un_upvote\">Un-upvote! (<%= model.get('upvote_count') %>)</button>\n    <% } else { %>\n    <button class=\"upvote\">Upvote! (<%= model.get('upvote_count') %>)</button>            \n    <% } %>\n    \n    <% if (model.get(\"down_retweeted\")) { %>\n    <button class=\"un_downvote\">Un-downvote! (<%= model.get('downvote_count') %>)</button>\n    <% } else { %>\n    <button class=\"downvote\">Downvote! (<%= model.get('downvote_count') %>)</button>\n    <% } %>\n                  \n    <% }else{ %>\n    \n    <% if (model.get(\"up_retweeted\")) { %>\n    <button class=\"un_upvote\">Un-endorse! (<%= model.get('upvote_count') %>)</button>            \n    <% } else { %>\n    <button class=\"upvote\">Endorse! (<%= model.get('upvote_count') %>)</button>            \n    <% } %>\n    \n    <% } %>\n    <% if(model.get(\"user_id\") == $(\".current_user\").attr('id') ) { %>\n    <small><button class=\"delete\">Delete</button></small>             \n    <% } %> \n</div>               \n<i class=\"sep\">&#10020;</i>";
        return _.template(tmp, data, options);
      };

      ProposalView.prototype.render = function() {
        if (this.options.add === true) {
          $("ul.collection").append(this.$el.html(this.template(this.model)));
        } else {
          this.$el.html(this.template(this.model));
        }
        return this;
      };

      ProposalView.prototype.vote_hash = function(vote) {
        var hash;
        hash = {
          upvote: null,
          downvote: null,
          un_upvote: null,
          un_downvote: null
        };
        hash[vote] = true;
        return hash;
      };

      ProposalView.prototype.do_vote = function(e, vote) {
        app.set_button_state(e.currentTarget);
        this.model.save(this.vote_hash(vote), {
          wait: true,
          patch: true,
          silent: true
        });
        return this;
      };

      ProposalView.prototype.upvote = function(e) {
        return this.do_vote(e, "upvote");
      };

      ProposalView.prototype.downvote = function(e) {
        return this.do_vote(e, "downvote");
      };

      ProposalView.prototype.un_upvote = function(e) {
        return this.do_vote(e, "un_upvote");
      };

      ProposalView.prototype.un_downvote = function(e) {
        return this.do_vote(e, "un_downvote");
      };

      ProposalView.prototype["delete"] = function(e) {
        app.set_button_state(e.currentTarget);
        this.model.destroy({
          wait: true,
          success: function(model) {
            if (window.location.pathname.match(/\/[0-9]+/) !== null) {
              return window.location.href = "/";
            }
          }
        });
        return this;
      };

      return ProposalView;

    })(Backbone.View);
    return ProposalView;
  });

}).call(this);
